Index: er9x/audio.h
===================================================================
--- er9x/audio.h	(revision 771)
+++ er9x/audio.h	(working copy)
@@ -102,7 +102,11 @@
 
 inline void driver() {
   if (toneTimeLeft > 0) {	
-					switch ((g_eeGeneral.speakerMode & 1)){					
+#ifndef SIMU
+					switch ((g_eeGeneral.speakerMode & 1)){
+#else
+					switch(0) {
+#endif
 								case 0:
 						        	//stock beeper. simply turn port on for x time!
 							        if (toneTimeLeft > 0){
Index: er9x/er9x.cpp
===================================================================
--- er9x/er9x.cpp	(revision 771)
+++ er9x/er9x.cpp	(working copy)
@@ -36,8 +36,11 @@
 static void checkTHR( void );
 ///   Prï¿½ft beim Einschalten ob alle Switches 'off' sind.
 static void checkSwitches( void );
+
+#ifndef SIMU
 static void checkQuickSelect( void ); // Quick model select on startup
 static void getADC_osmp( void ) ;
+#endif
 
 EEGeneral  g_eeGeneral;
 ModelData  g_model;
@@ -521,7 +524,6 @@
 
 }
 
-
 //#define CS_EQUAL     8
 //#define CS_NEQUAL    9
 //#define CS_GREATER   10
@@ -790,6 +792,7 @@
 		lcd_putcAtt(FW*2+i*2*FW-i-2, y, g_model.name[i],DBLSIZE);
 }
 
+#ifndef SIMU
 static void checkQuickSelect()
 {
     uint8_t i = keyDown(); //check for keystate
@@ -816,6 +819,7 @@
         clearKeyEvents(); // wait for user to release key
     }
 }
+#endif
 
 MenuFuncP g_menuStack[5];
 
@@ -1245,9 +1249,11 @@
 			PORTA_LCD_DAT = VoiceLatch ;			// Latch data set
 			PORTB |= (1<<OUT_B_LIGHT) ;				// Drive high,pullup enabled
 			DDRB &= ~(1<<OUT_B_LIGHT) ;				// Change to input
+#ifndef SIMU
 			asm(" nop") ;
 			asm(" nop") ;
 			asm(" nop") ;											// delay to allow input to settle
+#endif			
 			busy = PINB & 0x80 ;
 			DDRB |= (1<<OUT_B_LIGHT) ;				// Change to output
 			// The next bit guarantees the backlight output gets clocked out
@@ -1583,7 +1589,6 @@
 {
     g_tmr16KHz++;
 }
-#endif
 
 static uint16_t getTmr16KHz()
 {
@@ -1594,7 +1599,6 @@
     }
 }
 
-
 // Clocks every 64 uS
 ISR(TIMER0_COMP_vect, ISR_NOBLOCK) //10ms timer
 { 
@@ -2197,7 +2201,7 @@
 		}
 	}
 }
-
+#endif
 
 int16_t calc1000toRESX(int16_t x)  // improve calc time by Pat MacKenzie
 {
===================================================================
--- er9x/er9x.h	(revision 771)
+++ er9x/er9x.h	(working copy)
@@ -24,8 +24,15 @@
 ///opt/cross/avr/include/avr/pgmspace.h
 #include <stddef.h>
 
+#ifndef FORCEINLINE
+#define FORCEINLINE inline __attribute__ ((always_inline))
+#endif
+
+#ifndef NOINLINE
+#define NOINLINE __attribute__ ((noinline))
+#endif
+
 #ifndef SIMU
-
 #include <avr/io.h>
 #define assert(x)
 //disable whole pgmspace functionality for all avr-gcc because
@@ -66,14 +73,6 @@
 #undef PGM_P
 #define PGM_P const prog_char *
 
-#ifndef FORCEINLINE
-#define FORCEINLINE inline __attribute__ ((always_inline))
-#endif
-
-#ifndef NOINLINE
-#define NOINLINE __attribute__ ((noinline))
-#endif
-
 #ifdef __cplusplus
 #define APM __attribute__(( section(".progmem.data") ))
 #undef PSTR
@@ -795,7 +794,11 @@
 NOINLINE void resetTimer1(void) ;
 
 // Fiddle to force compiler to use a pointer
+#ifndef SIMU
 #define FORCE_INDIRECT(ptr) __asm__ __volatile__ ("" : "=e" (ptr) : "0" (ptr))
+#else
+#define FORCE_INDIRECT(ptr)
+#endif
 
 extern uint8_t telemItemValid( uint8_t index ) ;
 extern uint8_t Main_running ;
Index: er9x/frsky.cpp
===================================================================
--- er9x/frsky.cpp	(revision 771)
+++ er9x/frsky.cpp	(working copy)
@@ -483,22 +483,23 @@
   } else
     UCSR0B &= ~(1 << UDRIE0); // disable UDRE0 interrupt
 }
-#endif
 
 /******************************************/
 
+
 static void frskyTransmitBuffer()
 {
   frskyTxISRIndex = 0;
   UCSR0B |= (1 << UDRIE0); // enable  UDRE0 interrupt
 }
+#endif
 
 
 uint8_t FrskyAlarmSendState = 0 ;
 uint8_t FrskyDelay = 0 ;
 //uint8_t FrskyRSSIsend = 0 ;
 
-
+#ifndef SIMU
 static void FRSKY10mspoll(void)
 {
   if (FrskyDelay)
@@ -556,6 +557,7 @@
     frskyTransmitBuffer(); 
   }
 }
+#endif
 
 //  uint8_t i = 0;
 
@@ -809,13 +811,12 @@
 		}
 	}
   if (frskyUsrStreaming > 0) frskyUsrStreaming--;
-#endif
-	
+
   if ( FrskyAlarmSendState )
   {
     FRSKY10mspoll() ;
   }
-
+#endif
 	for( uint8_t i = 0 ; i < 2 ; i += 1 )
 	{
   	if ( g_model.frsky.channels[i].type == 3 )		// Current (A)
Index: er9x/menus.cpp
===================================================================
--- er9x/menus.cpp	(revision 771)
+++ er9x/menus.cpp	(working copy)
@@ -1432,7 +1432,7 @@
 
         //write mix names here
         lcd_outdezNAtt(3*FW, y, k+1, (sub==k ? INVERS : 0) + LEADING0,2);
-        lcd_putsAtt(  4*FW, y, (const prog_char*)pgm_read_word(&n_Templates[k]), (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
+        lcd_putsAtt(  4*FW, y, n_Templates[k], (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
         y+=FH;
     }
 
Index: er9x/myeeprom.h
===================================================================
--- er9x/myeeprom.h	(revision 771)
+++ er9x/myeeprom.h	(working copy)
@@ -44,6 +44,9 @@
 //#define GENERAL_MYVER_r365 4
 //#define GENERAL_MYVER      5
 
+#ifndef PACK
+#define PACK( __Declaration__ ) __Declaration__ __attribute__((__packed__))
+#endif
 
 // eeprom ver <9 => mdvers == 1
 // eeprom ver >9 => mdvers ==2
Index: er9x/simpgmspace.cpp
===================================================================
--- er9x/simpgmspace.cpp	(revision 771)
+++ er9x/simpgmspace.cpp	(working copy)
@@ -123,6 +123,14 @@
   pthread_join(main_thread_pid, NULL);
 }
 
+void sig(int sgn)
+{
+  main_thread_error = (char *)malloc(2048);
+  sprintf(main_thread_error,"Signal %d caught\n", sgn);
+  write_backtrace(main_thread_error);
+  throw std::exception();
+}
+
 #if 0
 static void EeFsDump(){
   for(int i=0; i<EESIZE; i++)
Index: er9x/simpgmspace.h
===================================================================
--- er9x/simpgmspace.h	(revision 771)
+++ er9x/simpgmspace.h	(working copy)
@@ -1,7 +1,12 @@
 /*
- * Author - Erez Raviv <erezraviv@gmail.com>
+ * Authors (alphabetical order)
+ * - Bertrand Songis <bsongis@gmail.com>
+ * - Bryan J. Rentoul (Gruvin) <gruvin@gmail.com>
  *
- * Based on th9x -> http://code.google.com/p/th9x/
+ * gruvin9x is based on code named er9x by
+ * Author - Erez Raviv <erezraviv@gmail.com>, which is in turn
+ * was based on the original (and ongoing) project by Thomas Husterer,
+ * th9x -- http://code.google.com/p/th9x/
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -48,13 +53,7 @@
   }
 }
 #endif
-void sig(int sgn)
-{
-  main_thread_error = (char *)malloc(2048);
-  sprintf(main_thread_error,"Signal %d caught\n", sgn);
-  write_backtrace(main_thread_error);
-  throw std::exception();
-}
+void sig(int sgn);
 #define assert(x) do { if (!(x)) { main_thread_error = (char *)malloc(2048); sprintf(main_thread_error, "Assert failed, %s:%d: %s\n", __FILE__, __LINE__, #x); write_backtrace(main_thread_error); throw std::exception(); } } while(0)
 #else
 #include <assert.h>
@@ -140,6 +139,8 @@
 #define SPIF dummyport
 #define SPCR dummyport
 
+#define TCNT0 0
+
 #define TIMSK  dummyport
 #define TIMSK1 dummyport
 
